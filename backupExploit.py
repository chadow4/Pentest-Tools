import requests

class BackUpExploit:
    def __init__(self, host, file_name):
        self.host = host
        self.file_name = file_name
        self.extensions = [
            ".backup", ".bck", ".old", ".save", ".bak", ".sav", "~", ".copy", ".orig",
            ".tmp", ".txt", ".back", ".bkp", ".bac", ".tar", ".gz", ".tar.gz", ".zip", ".rar"
        ]
        print(f"[+] Target host: {self.host}")
        print(f"[+] Target file: {self.file_name}")
        print("[+] Starting backup file scan...\n")

    def scan_backups(self):
        found = False
        for extension in self.extensions:
            url = f"{self.host}/{self.file_name}{extension}"
            try:
                response = requests.get(url)
                if response.status_code == 200:
                    found = True
                    print(f"[+] {url} - Code : 200 (OK) - Backup file found!")
                    print("[+] File contents:\n")
                    print(response.text)
                else:
                    print(f"[-] {url} - Code : {response.status_code} (Not Found)")
            except requests.RequestException as e:
                print(f"[-] Failed to connect to {url} - Error: {str(e)}")

        if not found:
            print("\n[-] No backup files were found with the specified extensions.")
        else:
            print("\n[+] Backup file scan completed.")


def main():
    print("Example of base URL: http://example.com/")
    host = input("Enter the base URL: ").strip()
    print("\nExample of file name: (e.g., index.php)")
    file_name = input("Enter the file name: ").strip()

    if not host or not file_name:
        print("[-] Error: Both the base URL and file name must be provided.")
        return

    exploit = BackUpExploit(host, file_name)
    exploit.scan_backups()


if __name__ == "__main__":
    main()
